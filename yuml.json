{
  "actors": [
    "User"
  ],
  "components": [
    "Frontend (React)",
    "Backend (Express API)",
    "Database (SQLite)",
    "File Storage (uploads/)"
  ],
  "flows": [
    {
      "scenario": "Add Category",
      "steps": [
        "User -> Frontend (React): Open Add Category form",
        "User -> Frontend (React): Fill name, color, icon, description",
        "Frontend (React) -> Backend (Express API): POST /api/categories (category data)",
        "Backend (Express API) -> Database (SQLite): Insert category",
        "Backend (Express API) -> Frontend (React): Return created category",
        "Frontend (React) -> User: Show success message"
      ]
    },
    {
      "scenario": "Edit Category",
      "steps": [
        "User -> Frontend (React): Click Edit on category",
        "Frontend (React) -> Backend (Express API): PUT /api/categories/{id} (updated category data)",
        "Backend (Express API) -> Database (SQLite): Update category",
        "Backend (Express API) -> Frontend (React): Return updated category",
        "Frontend (React) -> User: Show success message"
      ]
    },
    {
      "scenario": "Delete Category",
      "steps": [
        "User -> Frontend (React): Click Delete on category",
        "Frontend (React) -> Backend (Express API): DELETE /api/categories/{id}",
        "Backend (Express API) -> Database (SQLite): Delete category (cascade delete posts and images)",
        "Backend (Express API) -> Frontend (React): 204 No Content",
        "Frontend (React) -> User: Show success message"
      ]
    },
    {
      "scenario": "Database Table Management (View/Edit/Delete)",
      "steps": [
        "User -> Frontend (React): Open Database page",
        "Frontend (React) -> Backend (Express API): GET /api/db/{table} (e.g., posts, categories, images)",
        "Backend (Express API) -> Database (SQLite): Query all records from table",
        "Backend (Express API) -> Frontend (React): Return records",
        "Frontend (React) -> User: Display table data",
        "User -> Frontend (React): Click Edit/Delete on a record",
        "Frontend (React) -> Backend (Express API): PUT or DELETE /api/db/{table}/{id} (updated data or delete request)",
        "Backend (Express API) -> Database (SQLite): Update or delete record",
        "Backend (Express API) -> Frontend (React): Return updated record or 204 No Content",
        "Frontend (React) -> User: Show success message"
      ]
    },
    {
      "scenario": "Add Note with Image",
      "steps": [
        "User -> Frontend (React): Open Add Note form",
        "User -> Frontend (React): Fill title, content, select category, choose image",
        "Frontend (React) -> Backend (Express API): POST /api/upload (multipart/form-data, image)",
        "Backend (Express API) -> File Storage (uploads/): Save image file",
        "Backend (Express API) -> Frontend (React): Return imageUrl",
        "Frontend (React) -> Backend (Express API): POST /api/posts (note data)",
        "Backend (Express API) -> Database (SQLite): Insert note",
        "Backend (Express API) -> Frontend (React): Return created note",
        "Frontend (React) -> Backend (Express API): POST /api/images (image record: postId, imageUrl)",
        "Backend (Express API) -> Database (SQLite): Insert image record",
        "Backend (Express API) -> Frontend (React): Return image record",
        "Frontend (React) -> User: Show success message"
      ]
    },
    {
      "scenario": "Edit Note",
      "steps": [
        "User -> Frontend (React): Click Edit on note",
        "Frontend (React) -> Backend (Express API): PUT /api/posts/{id} (updated note data)",
        "Backend (Express API) -> Database (SQLite): Update note",
        "Backend (Express API) -> Frontend (React): Return updated note",
        "Frontend (React) -> User: Show success message"
      ]
    },
    {
      "scenario": "Delete Note",
      "steps": [
        "User -> Frontend (React): Click Delete on note",
        "Frontend (React) -> Backend (Express API): DELETE /api/posts/{id}",
        "Backend (Express API) -> Database (SQLite): Delete note (cascade delete images)",
        "Backend (Express API) -> Frontend (React): 204 No Content",
        "Frontend (React) -> User: Show success message"
      ]
    },
    {
      "scenario": "Search/Filter Notes",
      "steps": [
        "User -> Frontend (React): Enter search query or select category",
        "Frontend (React) -> Backend (Express API): GET /api/posts?search=... (or filter locally)",
        "Backend (Express API) -> Database (SQLite): Query notes",
        "Backend (Express API) -> Frontend (React): Return filtered notes",
        "Frontend (React) -> User: Display filtered notes"
      ]
    }
  ]
}