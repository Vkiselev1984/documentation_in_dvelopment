openapi: 3.0.0
info:
  title: NoteKeeper API
  version: 1.2.0
  description: |
    RESTful API for managing notes, categories, and images in the NoteKeeper app. All data is exchanged in JSON format. File uploads use multipart/form-data.
    
    - All endpoints return standard HTTP status codes.
    - On error, the response contains `{ error: "..." }`.
    - See each endpoint for request/response examples.
servers:
  - url: http://localhost:4000

paths:
  /api/posts:
    get:
      tags: [Posts]
      summary: Get all notes
      description: Returns a list of all notes (posts). Supports optional search by title.
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Filter notes by title substring (case-insensitive)
      responses:
        '200':
          description: List of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              examples:
                notes:
                  value:
                    - id: "1"
                      title: "First note"
                      content: "Hello world"
                      categoryId: "cat1"
    post:
      tags: [Posts]
      summary: Add a new note
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
            example:
              id: "2"
              title: "Second note"
              content: "Some text"
              categoryId: "cat2"
      responses:
        '201':
          description: Created note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/Error'
  /api/posts/{id}:
    put:
      tags: [Posts]
      summary: Edit a note
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Updated note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    delete:
      tags: [Posts]
      summary: Delete a note
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Note deleted
        '404':
          $ref: '#/components/responses/Error'

  /api/categories:
    get:
      tags: [Categories]
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags: [Categories]
      summary: Add a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Created category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/Error'
  /api/categories/{id}:
    put:
      tags: [Categories]
      summary: Edit a category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Updated category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    delete:
      tags: [Categories]
      summary: Delete a category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Category deleted
        '404':
          $ref: '#/components/responses/Error'

  /api/images:
    get:
      tags: [Images]
      summary: Get all images
      responses:
        '200':
          description: List of images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
    post:
      tags: [Images]
      summary: Add a new image record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '201':
          description: Created image record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/Error'
  /api/images/{postId}:
    get:
      tags: [Images]
      summary: Get images for a note
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of images for a note
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        '404':
          $ref: '#/components/responses/Error'
    delete:
      tags: [Images]
      summary: Delete an image by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Image deleted
        '404':
          $ref: '#/components/responses/Error'

  /api/upload:
    post:
      tags: [Images]
      summary: Upload an image file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  imageUrl:
                    type: string
                    example: /uploads/filename.png
        '400':
          $ref: '#/components/responses/Error'

  /api/db/{table}:
    get:
      tags: [Database]
      summary: Get all records from a table
      parameters:
        - in: path
          name: table
          schema:
            type: string
            enum: [posts, categories, images]
          required: true
      responses:
        '200':
          description: List of records
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Post'
                    - $ref: '#/components/schemas/Category'
                    - $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/Error'
  /api/db/{table}/{id}:
    put:
      tags: [Database]
      summary: Update a record by id in a table
      parameters:
        - in: path
          name: table
          schema:
            type: string
            enum: [posts, categories, images]
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated record
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    delete:
      tags: [Database]
      summary: Delete a record by id from a table
      parameters:
        - in: path
          name: table
          schema:
            type: string
            enum: [posts, categories, images]
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Record deleted
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'

components:
  schemas:
    Post:
      type: object
      required: [id, title, content, categoryId]
      properties:
        id:
          type: string
          description: Unique identifier for the note
        title:
          type: string
          description: Title of the note
        content:
          type: string
          description: Content of the note
        categoryId:
          type: string
          description: ID of the category this note belongs to
    Category:
      type: object
      required: [id, name, color]
      properties:
        id:
          type: string
          description: Unique identifier for the category
        name:
          type: string
          description: Name of the category
        color:
          type: string
          description: Color of the category (HEX)
        icon:
          type: string
          description: Icon for the category (optional)
        description:
          type: string
          description: Description of the category (optional)
    Image:
      type: object
      required: [id, postId, imageUrl]
      properties:
        id:
          type: string
          description: Unique identifier for the image
        postId:
          type: string
          description: ID of the note this image belongs to
        imageUrl:
          type: string
          description: URL of the uploaded image
  responses:
    Error:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
          examples:
            notFound:
              value:
                error: Not found
            badRequest:
              value:
                error: Bad request
